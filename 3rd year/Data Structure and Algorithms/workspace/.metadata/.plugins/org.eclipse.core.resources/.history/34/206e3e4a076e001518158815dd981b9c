import java.util.ArrayList;

public class ParseTree extends MyTree<Object> {// k-ary tree

	public ParseTree() {
		super(2);
	}

	public void parseString(String input) {

	}

	public void deleteSubtreeFrom(int index) {
		for (int j = 0; j < this.k; j++) {
			int childIndex = childIndex(index, j);
			if (get(childIndex) != null)
				deleteSubtreeFrom(childIndex);
		}
		set(index, null);
	}

	<T> double  commonConverter(T data){
		double output;
		if (Integer.class.isInstance(data))
				output=new Double((int)data);
		if (Double.class.isInstance(data))
			output=(double)data;
		return data;		
	}
	public void calculating(int i) {
		for (int j = 0; j < 2; j++) {
			int child = childIndex(i, j);
			if (get(child) != null)
				calculating(child);
		}
		double a=new Double(10);

		Object result = null;
		if (String.class.isInstance(get(i)))
			switch ((String) get(i)) {
			case "+":
				result = (double) get(childIndex(i, 0)) + (double) get(childIndex(i, 1));
				break;
			case "-":
				result = ((double) get(childIndex(i, 0)) - (double) get(childIndex(i, 1)));
				break;
			case "*":
				result = ((double) get(childIndex(i, 0)) * (double) get(childIndex(i, 1)));
				break;
			case "/":
				result = ((double) get(childIndex(i, 0)) / (double) get(childIndex(i, 1)));
				break;
			}

		
		if (Integer.class.isInstance(get(i)))
			result = (int) get(i);
		if (Double.class.isInstance(get(i)))
			result = (double) get(i);

		
		deleteSubtreeFrom(i);
		set(i, result);

		System.out.println(get(i).toString());
		this.postorderTraversal(0);
		System.out.println();
	}

}
